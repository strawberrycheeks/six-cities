/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/six-cities/offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получить список предложений
         * @description Возвращает массив предложений. Каждое предложение описано в виде объекта. Обратите внимание, что заголовок `X-Token`, для данного маршрута, не является обязательным. Для авторизованного пользователя данные о предложениях содержат флаг `isFavorite`.
         */
        get: operations["getOffers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/six-cities/offers/{offerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получить предложение
         * @description Возвращает предложение с идентификатором `offerId`. Обратите внимание, что заголовок `X-Token`, для данного маршрута, не является обязательным. Для авторизованного пользователя данные о предложении содержат флаг `isFavorite`.
         */
        get: operations["getOfferById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/six-cities/offers/{offerId}/nearby": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получить список предложений неподалёку
         * @description Возвращает массив предложений. Каждое предложение описано в виде объекта. Обратите внимание, что заголовок `X-Token`, для данного маршрута, не является обязательным. Для авторизованного пользователя данные о предложениях содержат флаг `isFavorite`.
         */
        get: operations["getOffersNearby"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/six-cities/favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получить список избранных предложений
         * @description Возвращает массив предложений, добавленных в избранное.
         */
        get: operations["getFavorites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/six-cities/favorite/{offerId}/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Изменить статус избранного у предложение
         * @description Возвращает предложение с идентификатором `offerId` с актуальным состоянием поля `isFavorite`
         */
        post: operations["postFavorite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/six-cities/comments/{offerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получить список комментариев
         * @description Возвращает список комментариев для предложения с идентификатором `offerId`.
         */
        get: operations["getComment"];
        put?: never;
        /**
         * Добавить новый комментарий
         * @description Добавляет новый комментарий для предложения с идентификатором `offerId`.
         */
        post: operations["postComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/six-cities/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Проверить статус авторизации пользователя
         * @description Возвращает информацию о статусе авторизации пользователя.
         */
        get: operations["getUserStatus"];
        put?: never;
        /**
         * Авторизоваться на сервере
         * @description Отправляет авторизационные данные пользователя (логин и пароль). В случае успешного запроса сервер вернёт токен, по которому в дальнейшем происходит авторизация. Этот токен необходимо передавать через заголовок X-Token. Если авторизация не проходит, сервер вернёт код состояния 401 при запросах на закрытые части сайта.
         */
        post: operations["postLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/six-cities/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Завершить сеанс пользователя
         * @description Завершает сеанс работы — выход из закрытой части приложения.
         */
        delete: operations["deleteLogout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /** @example Oliver.conner@gmail.com */
            email?: string;
            /** @example password1 */
            password?: string;
        };
        HostInfo: {
            /** @example Oliver Conner */
            name?: string;
            /** @example https://url-to-image/image.png */
            avatarUrl?: string;
            /** @example false */
            isPro?: boolean;
        };
        AuthInfo: components["schemas"]["HostInfo"] & {
            /** @example Oliver.conner@gmail.com */
            email?: string;
        };
        AuthInfoWithToken: components["schemas"]["AuthInfo"] & {
            /** @example T2xpdmVyLmNvbm5lckBnbWFpbC5jb20= */
            token?: string;
        };
        Location: {
            /** @example 52.35514938496378 */
            latitude?: number;
            /** @example 4.673877537499948 */
            longitude?: number;
            /** @example 8 */
            zoom?: number;
        };
        City: {
            /** @example Amsterdam */
            name?: string;
            location?: components["schemas"]["Location"];
        };
        OfferMinimum: {
            /** @example 6af6f711-c28d-4121-82cd-e0b462a27f00 */
            id?: string;
            /** @example Beautiful & luxurious studio at great location */
            title?: string;
            /** @example apartment */
            type?: string;
            /** @example 120 */
            price?: number;
            city?: components["schemas"]["City"];
            location?: components["schemas"]["Location"];
            /** @example false */
            isFavorite?: boolean;
            /** @example false */
            isPremium?: boolean;
            /** @example 4 */
            rating?: number;
        };
        OfferPreview: components["schemas"]["OfferMinimum"] & {
            /** @example https://url-to-image/image.png */
            previewImage?: string;
        };
        Offer: components["schemas"]["OfferMinimum"] & {
            /** @example A quiet cozy and picturesque that hides behind a a river by the unique lightness of Amsterdam. */
            description?: string;
            /** @example 3 */
            bedrooms?: number;
            goods?: string[];
            host?: components["schemas"]["HostInfo"];
            images?: string[];
            /** @example 4 */
            maxAdults?: number;
        };
        OfferMaximum: components["schemas"]["OfferPreview"] & {
            /** @example A quiet cozy and picturesque that hides behind a a river by the unique lightness of Amsterdam. */
            description?: string;
            /** @example 3 */
            bedrooms?: number;
            goods?: string[];
            host?: components["schemas"]["HostInfo"];
            images?: string[];
            /** @example 4 */
            maxAdults?: number;
        };
        OfferMaximumFavorite: components["schemas"]["OfferMaximum"] & {
            /** @example true */
            isFavorite?: boolean;
        };
        CommentPost: {
            /** @example A quiet cozy and picturesque that hides behind a a river by the unique lightness of Amsterdam. */
            comment?: string;
            /** @example 4 */
            rating?: number;
        };
        CommentGet: {
            /** @example b67ddfd5-b953-4a30-8c8d-bd083cd6b62a */
            id?: string;
            /** @example 2019-05-08T14:13:56.569Z */
            date?: string;
            user?: components["schemas"]["HostInfo"];
        } & components["schemas"]["CommentPost"];
        AuthError: {
            /** @example COMMON_ERROR */
            errorType?: string;
            /** @example Access deny. */
            message?: string;
        };
        TokenNotFound: {
            /** @example COMMON_ERROR */
            errorType?: string;
            /** @example Header Token is not correct. */
            message?: string;
        };
        ConflictAddFavoriteError: {
            /** @example COMMON_ERROR */
            errorType?: string;
            /** @example Offer with id 6af6f711-c28d-4121-82cd-e0b462a27f00 has already been added to favorites. */
            message?: string;
        };
        NotFoundError: {
            /** @example COMMON_ERROR */
            errorType?: string;
            /** @example Offer with id 6af6f711-c28d-4121-82cd-e0b462a27f00 not found. */
            message?: string;
        };
        NotFoundFavoriteError: {
            /** @example COMMON_ERROR */
            errorType?: string;
            /** @example Offer with id 6af6f711-c28d-4121-82cd-e0b462a27f00 has not been added to favorites yet. */
            message?: string;
        };
        BodyCommentError: {
            /** @example rating */
            property?: string;
            /** @example a */
            value?: string;
            messages?: string[];
        };
        BodyAuthError: {
            /** @example password */
            property?: string;
            /** @example p */
            value?: string;
            messages?: string[];
        };
        CommentPostError: {
            /** @example VALIDATION_ERROR */
            errorType?: string;
            /** @example Validation error: /six-cities/comments/3254b559-0a4f-4c20-a514-0dc38173ea09 */
            message?: string;
            details?: components["schemas"]["BodyCommentError"][];
        };
        ParamFavoriteError: {
            /** @example COMMON_ERROR */
            errorType?: string;
            /** @example Wrong status to add offer in favorite: 2. */
            message?: string;
        };
        AuthPostError: {
            /** @example VALIDATION_ERROR */
            errorType?: string;
            /** @example Validation error: /six-cities/login */
            message?: string;
            details?: components["schemas"]["BodyAuthError"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getOffers: {
        parameters: {
            query?: never;
            header?: {
                /** @description Авторизационный токен пользователя */
                "X-Token"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Массив предложений */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferPreview"][];
                };
            };
        };
    };
    getOfferById: {
        parameters: {
            query?: never;
            header?: {
                /** @description Авторизационный токен пользователя */
                "X-Token"?: string;
            };
            path: {
                /** @description Уникальный идентификатор предложения */
                offerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Объект предложения */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Offer"];
                };
            };
            /** @description Предложение не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    getOffersNearby: {
        parameters: {
            query?: never;
            header?: {
                /** @description Авторизационный токен пользователя */
                "X-Token"?: string;
            };
            path: {
                /** @description Уникальный идентификатор предложения */
                offerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Массив предложений */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferPreview"][];
                };
            };
            /** @description Предложение не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    getFavorites: {
        parameters: {
            query?: never;
            header: {
                /** @description Авторизационный токен пользователя */
                "X-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Массив предложений */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferPreview"][];
                };
            };
            /** @description Пользователь не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthError"] | components["schemas"]["TokenNotFound"];
                };
            };
        };
    };
    postFavorite: {
        parameters: {
            query?: never;
            header: {
                /** @description Авторизационный токен пользователя */
                "X-Token": string;
            };
            path: {
                /** @description Уникальный идентификатор предложения */
                offerId: string;
                /** @description Статус избранного предложения. Может быть `1` или `0`, где `1` добавляет предложение в избранное, а `0` удаляет */
                status: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Объект предложения */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferMaximum"];
                };
            };
            /** @description Объект предложения */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferMaximumFavorite"];
                };
            };
            /** @description Ошибка тела запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParamFavoriteError"];
                };
            };
            /** @description Пользователь не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthError"] | components["schemas"]["TokenNotFound"];
                };
            };
            /** @description Предложение не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"] | components["schemas"]["NotFoundFavoriteError"];
                };
            };
            /** @description Предложение уже добавлено в избранное */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictAddFavoriteError"];
                };
            };
        };
    };
    getComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Уникальный идентификатор предложения */
                offerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Массив комментариев */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentGet"][];
                };
            };
            /** @description Предложение не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    postComment: {
        parameters: {
            query?: never;
            header: {
                /** @description Авторизационный токен пользователя */
                "X-Token": string;
            };
            path: {
                /** @description Уникальный идентификатор предложения */
                offerId: string;
            };
            cookie?: never;
        };
        /** @description Объект с новым комментарием */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentPost"];
            };
        };
        responses: {
            /** @description Объект нового комментария */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentGet"];
                };
            };
            /** @description Ошибка тела запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentPostError"];
                };
            };
            /** @description Пользователь не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthError"] | components["schemas"]["TokenNotFound"];
                };
            };
            /** @description Предложение не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    getUserStatus: {
        parameters: {
            query?: never;
            header: {
                /** @description Авторизационный токен пользователя */
                "X-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Статус авторизации пользователя */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthInfoWithToken"];
                };
            };
            /** @description Пользователь не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthError"] | components["schemas"]["TokenNotFound"];
                };
            };
        };
    };
    postLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Объект, содержащий логин и пароль пользователя. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description Статус авторизации */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthInfoWithToken"];
                };
            };
            /** @description Ошибка тела запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthPostError"];
                };
            };
        };
    };
    deleteLogout: {
        parameters: {
            query?: never;
            header: {
                /** @description Авторизационный токен пользователя */
                "X-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Сеанс завершён */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
